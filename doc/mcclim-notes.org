#+TITLE: (Mc)CLIM notes

Just various notes I've collected about (Mc)CLIM, either by asking in #clim or randomly online.

* [[https://github.com/McCLIM/McCLIM/wiki/Resources-and-Links][McCLIM Resources and Links]]
Various resources and links about McCLIM, UI/UX design, and more.
* misc mcclim code info/reference
** useful mcclim macros/functions
- define-presentation-translator
- define-presentation-to-command-translator
- define-presentation-action
- define-drag-and-drop-translator
- menu-choose
- menu-choose-from-drawer
** accessing panes/sheets/etc
- frame-top-level-sheet
- sheet-children
** define-command argument keywords
- default
- default-type
- display-default
- mentioned-default
- prompt
- documentation
- when
- gesture
* theming
** "Sort out the gadget color situation" https://github.com/McCLIM/McCLIM/issues/842
** Feb 17, 2018
18:23:01 mepian: does McCLIM support themes? was this proposal implemented? http://vintage-digital.com/hefner/mcclim/mcclim-theme-notes.txt
18:24:55 jackdaniel: mepian: quick grepping through sources shows, that it is implemented
18:25:14 jackdaniel: I've never approached this document before (and there is no documentation for it)
18:27:57 mepian: jackdaniel: did anyone ever try to use it? I think every screenshot I've seen used the default look
18:29:17 jackdaniel: I can't speak for everyone. I didn't use it, but since it is implemented I'm sure it was "ever used" at least by the implementor
18:33:40 jackdaniel: things from "tentative design" section are not implemented whatsoever
18:34:13 jackdaniel: only things mentioned earlier. so if the first was just a summary of what is implemented, and the second part is the actual proposal, then no, it was not implemented
** Oct 11, 2018
7:07:07 fiddlerwoaroof: What is the function of a frame manager?
7:07:15 fiddlerwoaroof: Does it control styling?
7:07:30 fiddlerwoaroof: clim frame-manager
7:09:09 jackdaniel: it is not well documented and quite underdeveloped in McCLIM
7:09:47 jackdaniel: but in principle frame manager is responsible for styling and similar, yes
7:10:14 jackdaniel: for instance you could have one port (which is a logical connection to display server) and different toolkits associated with different frame managers
7:10:19 fiddlerwoaroof: So, if I wanted to theme my clim application, I should think about creating swappable theme managers?
7:10:36 jackdaniel: it is responsible for mapping abstract panes (i.e push button) to clx-push-button, or material-push-button whatever
7:10:43 fiddlerwoaroof: And, e.g. swap between a gnome-style ui and a kde-style one, etc.
7:10:45 fiddlerwoaroof: cool.
7:11:09 jackdaniel: that said, I have some work started on more elaborate theming (which will utilize frame managers)
7:11:30 jackdaniel: but this effort is temporarily halted - patterns and fonts ate my last few months
7:12:05 jackdaniel: https://files.mastodon.social/media_attachments/files/005/005/502/original/7331eec572c7081d.png
7:12:22 jackdaniel: this is a project of text-field pane
7:12:32 jackdaniel: using material io guidelines
7:12:50 jackdaniel: https://files.mastodon.social/media_attachments/files/005/137/698/original/45323837a6307236.png and more of the same
7:13:14 fiddlerwoaroof: Looks good
7:13:31 jackdaniel: good news is that since we now have indirect ink protocol in place I will be able to incorporate it
7:14:09 fiddlerwoaroof: I know everyone is busy, but prioritizing this sort of thing might help attract interest: for some reason, the thing people seem to care about most when it comes to a GUI toolkit is what the outputs look like.
7:14:18 fiddlerwoaroof: s/outputs/controls/
7:14:23 jackdaniel: that's why I started this work
7:14:51 fiddlerwoaroof: I've also been mulling some alternative ports to make it more useful cross-platform
7:15:53 jackdaniel: imho we should wrap a performant and clean sdl backend - that way we are cross-platform with just one additional backend
* zoom
** Apr 19, 2020
14:21:45 defaultxr:   i see that there are examples for scrolling of course, but is there a "preferred" way of doing zoom in (mc)clim, or is that just something i should be implementing myself, i.e. by keeping a "scale" or "zoom" slot in my pane/frame and writing my display-function based on it?
14:37:26 jackdaniel:  currently you should do exactly that, keep the scale as a slot and redisplay when it changes
14:37:50 jackdaniel:  in the future it will be more seamless, but the thing I'm thinking about does not work correctly yet
* multiple selection
** Apr 19, 2020
14:41:25 defaultxr:   thanks! i'm also wondering about selecting multiple objects at once (i.e. the traditional "click and drag on an empty space to draw a rectangle and all objects in it become selected); does (mc)clim have a preferred way of doing that?
14:42:37 jackdaniel:  I can't think of anything
14:42:55 jackdaniel:  but if you write such thing, please share it so we can learn from it
* how to implement a "partial redisplay" function
** May 11, 2022
2022-05-11 02:06:35	jackdaniel	defaultxr: that's how this could be approached: https://plaster.tymoon.eu/view/3123#3123
2022-05-11 02:07:04	jackdaniel	notice, that you need to provide /whole/ dimensions when constructing the record, so scroll bars know how much space your pane occupies
2022-05-11 02:08:56	jackdaniel	this perhaps could be polished into a demo, but oh well, having only 10 fingers is certainly a limiting factor ,)
2022-05-11 02:10:33	jackdaniel	n.b the fact that I had to use pane-viewport-region instead of supplied region to replay-output-record is a hint, that the supplied region is too big
2022-05-11 02:11:13	jackdaniel	as in: optimization opportunity
2022-05-11 02:12:29	jackdaniel	it is surprising, because we do compute the intersection with parents in repaint-sheet
2022-05-11 02:14:34	jackdaniel	defaultxr: btw, this is not a noob quesiton;
2022-05-11 02:26:22	jackdaniel	I've added this snippet to the wiki in "How to Guides"
*** linked code
#+begin_src lisp
(in-package #:clim-user)

(defclass my-fancy-record (climi::standard-displayed-output-record)
  ())

(defmethod replay-output-record ((record my-fancy-record) stream &optional region x y)
  (declare (ignore x y))
  (let ((ink (alexandria:random-elt (list +blue+ +red+ +yellow+ +green+ +cyan+ +grey+))))
    (with-bounding-rectangle* (x1 y1 x2 y2) (pane-viewport-region stream)
      (draw-rectangle* stream x1 y1 x2 y2 :ink +white+)
      (draw-rectangle* stream (+ x1 10) (+ y1 10 ) (- x2 10) (- y2 10) :ink ink))))

(defun fancy-display (frame stream)
  (declare (ignore frame))
  (stream-add-output-record stream
                            (make-instance 'my-fancy-record
                                           :x1 0 :y1 0 :x2 800 :y2 600
                                           :ink +black+
                                           :clipping-region (make-rectangle* 0 0 800 600))))


(define-application-frame defaultxr ()
  ()
  (:pane :application :display-function 'fancy-display :display-time t))

(find-application-frame 'defaultxr)
#+end_src
* when to use updating-output
2022-06-11 12:06:19	contrapunctus	jackdaniel: you told me to remove calls to `updating-output` before, so I was wondering in what situations it is required, and in what situations it's enough to just have `:incremental-redisplay t` for the pane. (Perhaps I could add this information to the manual.)
2022-06-11 12:08:23	jackdaniel	sole :incremental-redisplay t will compare output records before and after the redisplay (the display function will run fully), if you add updating-output caching points, then their bodies will be executed conditionally based on the cache test, so there is less to a) display, b) compare for a difference
2022-06-11 12:08:51	jackdaniel	there is also the function redisplay-output-record that may be used to recompute only part of the already displayed history
2022-06-11 12:09:03	jackdaniel	in other words updating-output gives you additional caching points
* drei info
** https://common-lisp.net/project/mcclim/static/documents/drei.pdf
* https://github.com/admich/adm-clim-lib
CLIM utilities, including a tree view, datetime presentations, history persistence (undo/redo)
* 07:58:13 alanz:       Is there a way to define a table cell with a maximum width and have text wrap in it?
08:08:24 alanz:       I guess I can use something based on https://github.com/lokedhs/clim-test/blob/master/word-wrap.lisp
08:18:24 scymtym:     there are builtin mechanisms. you can use (with-end-of-line-action (STREAM :wrap*) …) for word-based wrapping when the right margin is reached. there are multiple ways to configure the right margin within the table cell. one is (clime:with-temporary-margins (STREAM :right `(:absolute ,DESIRED-RIGHT-MARGIN)) …)
08:21:14 alanz:       thanks
08:21:56 alanz:       I figured there would be a way to do it, just not sure how.  I already have end-of-line action as wrap for the pane, it was just the margin that was troubling me
08:22:40 scymtym:     note that :WRAP is characters-wise, :WRAP* is word-wise
08:24:25 alanz:       :+1:.  But Setting ":end-of-line-action :wrap" for the pane seems to wrap at word boundaries?
08:25:19 jackdaniel:  no, :wrap works at character boundaries, :wrap* looks for spaces (that is not very uax-whatever, I know)
08:55:22 alanz:       It turns out "(clim:filling-output (stream :fill-width 400) ..)" does exactly what I need
08:55:59 alanz:       As I want to specify a width, not a right margin
